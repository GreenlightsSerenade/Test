import sys


def solution(n, m, paper):
    tetro = [[(1, 0), (2, 0), (3, 0)], [(0, 1), (0, 2), (0, 3)],
             [(-1, 0), (-2, 0), (-3, 0)], [(0, -1), (0, -2), (0, -3)],  # Line
             [(1, 0), (0, 1), (1, 1)], [(1, 0), (0, -1), (1, -1)],
             [(-1, 0), (0, 1), (-1, 1)], [(-1, 0), (0, -1), (-1, -1)],  # Square
             [(1, 0), (2, 0), (2, 1)], [(1, 0), (2, 0), (2, -1)],
             [(-1, 0), (-2, 0), (-2, 1)], [(-1, 0), (-2, 0), (-2, -1)],
             [(0, 1), (0, 2), (1, 2)], [(0, 1), (0, 2), (-1, 2)],
             [(0, -1), (0, -2), (1, -2)], [(0, -1), (0, -2), (-1, -2)],     # L
             [(1, 0), (1, 1), (2, 1)], [(1, 0), (1, -1), (2, -1)],
             [(-1, 0), (-1, 1), (-2, 1)], [(-1, 0), (-1, -1), (-2, -1)],
             [(0, 1), (1, 1), (1, 2)], [(0, 1), (-1, 1), (-1, 2)],
             [(0, -1), (1, -1), (1, -2)], [(0, -1), (-1, -1), (-1, -2)],    # N
             [(1, 0), (2, 0), (1, 1)], [(1, 0), (2, 0), (1, -1)],
             [(-1, 0), (-2, 0), (-1, 1)], [(-1, 0), (-2, 0), (-1, -1)],
             [(0, 1), (0, 2), (1, 1)], [(0, 1), (0, 2), (-1, 1)],
             [(0, -1), (0, -2), (1, -1)], [(0, -1), (0, -2), (-1, -1)]]     # ã…—
    ans = -1
    for i in range(n):
        for j in range(m):
            for tet in tetro:
                tmp = paper[i][j]
                for dx, dy in tet:
                    if 0 <= i + dx < n and 0 <= j + dy < m:
                        tmp += paper[i + dx][j + dy]
                    else:
                        tmp = -1
                        break
                ans = max(ans, tmp)
    return ans


N, M = tuple(map(int, sys.stdin.readline().rstrip().split(' ')))
L = [list(map(int, sys.stdin.readline().rstrip().split(' '))) for _ in range(N)]
print(solution(N, M, L))